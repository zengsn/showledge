<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd 
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

	<description>Spring公共配置</description>

	<!-- 使用spring自带的占位符替换功能,读取配置文件一样的,这个更底层一点 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 允许JVM参数覆盖 -->
		<!-- java -Djdbc.url=123 -jar xxx.jar -->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<!-- 忽略没有找到的资源文件 -->
		<property name="ignoreResourceNotFound" value="true" />
		<!-- 配置资源文件 -->
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

	<!-- 开启定时任务 -->
	<task:annotation-driven />
	 <!-- 在applicationContext.xml中进行配置，使用定时器
        ref : pojo类的名称
        method : 调用的方式名称
        cron : cronExpression表达式
        cron="0/5 * * * * ?"  //表示五秒钟执行一次
     -->
     <context:component-scan base-package=" com.caitou" /> 
    <task:scheduled-tasks>
        <task:scheduled ref="updateHotTask" method="updateNoteHot" cron="0/55 * * * * ?"/>
        <task:scheduled ref="updateHotTask" method="updateKMapHot" cron="0/55 * * * * ?"/>
        <task:scheduled ref="createKMapTask" method="createKMap" cron="0 0/2 * * * ?"/>
        <task:scheduled ref="recommendTask" method="doRecommend" cron="0 0/1 * * * ?"/>
    </task:scheduled-tasks>

	<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<property name="minIdle" value="0" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:/mybatis/*Mapper.xml" />
		<!-- mybatis配置文件路径 -->
		<property name="configLocation" value="classpath:/mybatis/config.xml" />
		<!-- 扫描bean包,使用别名 -->
		<property name="typeAliasesPackage" value="com.caitou.bean" />
	</bean>
	
	<!-- mapper接口的扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.caitou.dao"/>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- 这个执行器会批量执行更新语句, 还有SIMPLE 和 REUSE -->
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<!-- 扫描basePackage接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 映射器接口文件的包路径， -->
		<property name="basePackage" value="com.caitou.dao" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 配置基于注解的声明事务 默认使用注解来管理事务行为  -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

<!-- 定义事务策略 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--所有以query开头的方法都是只读的 -->
			<tx:method name="get*" read-only="true" />
			<!--其他方法使用默认事务策略,如果有异常抛出做事物回滚 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型，
			这里星号表明匹配所有返回类型。 com.abc.dao.*.*(..)表明匹配cn.itcast.mybatis.service包下的所有类的所有 
			方法 -->
		<aop:pointcut id="myPointcut" expression="execution(* com.caitou.service.*.*(..))" />
		<!--将定义好的事务处理策略应用到上述的切入点 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
	</aop:config>

	<!-- kaptcha环境 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<!-- 图片边框 -->
						<prop key="kaptcha.border">no</prop>
						<!-- 图片宽度 -->
						<prop key="kaptcha.image.width">110</prop>
						<!-- 图片高度 -->
						<prop key="kaptcha.image.height">40</prop>
						<!-- 验证码背景颜色渐变，开始颜色 -->
						<prop key="kaptcha.background.clear.from">248,248,248</prop>
						<!-- 验证码背景颜色渐变，结束颜色 -->
						<prop key="kaptcha.background.clear.to">248,248,248</prop>
						<!-- 验证码字体颜色 -->
						<prop key="kaptcha.textproducer.font.color">blue</prop>
						<!-- 验证码字体大小 -->
						<prop key="kaptcha.textproducer.font.size">35</prop>
						<!-- 验证码的效果，水纹 -->
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
						<prop key="kaptcha.session.key">code</prop>
						<!-- 验证码字数 -->
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<!-- 验证码文字间距 -->
						<prop key="kaptcha.textproducer.char.space">2</prop>
						<!-- 验证码字体 -->
						<prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
						<!-- 不加噪声 -->
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	
		<!-- production环境,这种配置方法经常找不到参数 -->
<!-- 	<beans profile="production">
		<context:property-placeholder
			ignore-unresolvable="false" file-encoding="utf-8"
			location="classpath:config.properties,classpath:jdbc.properties" />
	</beans>
 -->
</beans>
















